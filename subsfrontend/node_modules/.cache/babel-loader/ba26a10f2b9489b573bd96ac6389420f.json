{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.css\";\nimport \"./subs.json\";\nimport axios from \"axios\";\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      suggestions: [],\n      rawOptions: [],\n      options: []\n    };\n    /* ToDO: replace with call to postgresql db to retrieve data in json format*/\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8000/api/subs\").then(res => {\n      console.log(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  /* refreshSuggestions = () => {\r\n    let optionsArray = []\r\n    for (var i in this.rawOptions) {\r\n      var item = this.rawOptions[i];\r\n      optionsArray.push(item.subname);\r\n    }\r\n    this.setState({options: optionsArray})\r\n  }\r\n    onTextChanged = event => {\r\n    const value = event.target.value;\r\n    let suggestions = [];\r\n    if (value.length > 0) {\r\n      const regex = new RegExp(`^${value}`, \"i\");\r\n      suggestions = this.options.sort().filter(value => regex.test(value));\r\n    }\r\n    this.setState({ suggestions: suggestions, input: value });\r\n  };\r\n    suggestionSelected(value) {\r\n    this.setState({\r\n      input: value,\r\n      suggestions: []\r\n    });\r\n    this.props.sendData({ name: \"ingredient\", value: value });\r\n  }\r\n    renderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {suggestions.map(item => (\r\n              <li onClick={() => this.suggestionSelected(item)}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n    }\r\n  } */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoComplete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.input,\n      type: \"text\",\n      onChange: this.onTextChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nexport default Autocomplete;","map":{"version":3,"sources":["/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js"],"names":["React","Component","PropTypes","axios","Autocomplete","constructor","props","state","input","suggestions","rawOptions","options","componentDidMount","get","then","res","console","log","data","catch","err","render","onTextChanged","renderSuggestions"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,cAAP;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AACnCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,WAAW,EAAE,EAFJ;AAGTC,MAAAA,UAAU,EAAE,EAHH;AAITC,MAAAA,OAAO,EAAC;AAJC,KAAb;AAMA;AAGD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjBT,IAAAA,KAAK,CACJU,GADD,CACK,gCADL,EAECC,IAFD,CAEMC,GAAG,IAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACH,KAJD,EAKCC,KALD,CAKOC,GAAG,IAAI;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH,KAPD;AAQD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,KAAK,EAAE,KAAKd,KAAL,CAAWC,KADpB;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAE,KAAKc,aAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMG,KAAKC,iBAAL,EANH,CADF;AAUD;;AAhFkC;;AAmFrC,eAAenB,YAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\nimport \"./subs.json\";\r\nimport axios from \"axios\";\r\n\r\nclass Autocomplete extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        input: \"\",\r\n        suggestions: [],\r\n        rawOptions: [],\r\n        options:[]\r\n      };\r\n    /* ToDO: replace with call to postgresql db to retrieve data in json format*/\r\n    \r\n    \r\n  }\r\n\r\n  componentDidMount(){\r\n    axios\r\n    .get(\"http://localhost:8000/api/subs\")\r\n    .then(res => {\r\n        console.log(res.data)\r\n    })\r\n    .catch(err => {\r\n        console.log(err)\r\n    });\r\n  }\r\n\r\n  /* refreshSuggestions = () => {\r\n    let optionsArray = []\r\n    for (var i in this.rawOptions) {\r\n      var item = this.rawOptions[i];\r\n      optionsArray.push(item.subname);\r\n    }\r\n    this.setState({options: optionsArray})\r\n  }\r\n\r\n  onTextChanged = event => {\r\n    const value = event.target.value;\r\n    let suggestions = [];\r\n    if (value.length > 0) {\r\n      const regex = new RegExp(`^${value}`, \"i\");\r\n      suggestions = this.options.sort().filter(value => regex.test(value));\r\n    }\r\n    this.setState({ suggestions: suggestions, input: value });\r\n  };\r\n\r\n  suggestionSelected(value) {\r\n    this.setState({\r\n      input: value,\r\n      suggestions: []\r\n    });\r\n    this.props.sendData({ name: \"ingredient\", value: value });\r\n  }\r\n\r\n  renderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {suggestions.map(item => (\r\n              <li onClick={() => this.suggestionSelected(item)}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n    }\r\n  } */\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AutoComplete\">\r\n        <input\r\n          value={this.state.input}\r\n          type=\"text\"\r\n          onChange={this.onTextChanged}\r\n        />\r\n        {this.renderSuggestions()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}