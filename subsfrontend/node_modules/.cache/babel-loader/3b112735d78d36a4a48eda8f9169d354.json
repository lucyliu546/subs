{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js\";\nimport React, { Component } from \"react\";\nimport \"./styles.css\";\nimport \"./subs.json\";\nimport axios from \"axios\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { withStyles } from \"@material-ui/core\";\nconst StyledText = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: 'gray'\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: '#D9D9D9'\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: 'white'\n      },\n      '&:hover fieldset': {\n        borderColor: 'white'\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: '#D9D9D9'\n      }\n    },\n    boxShadow: '0 3px 3px 2px rgba(240, 105, 135, .3)'\n  }\n})(TextField);\n\nclass Autocompleteself extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      ingredient: \"\",\n      suggestions: [],\n      rawOptions: [],\n      options: []\n    };\n  }\n\n  async componentDidMount() {\n    await axios.get(\"http://127.0.0.1:8000/api/subs/\").then(response => {\n      var result = response.data;\n      this.setState({\n        rawOptions: result\n      });\n    }, error => {\n      {\n        alert(error);\n      }\n      ;\n    });\n  }\n\n  onInputChanged(event, value) {\n    if (value !== null) {\n      this.props.sendData({\n        name: \"showResult\",\n        value: false\n      });\n    }\n\n    this.setState({\n      input: value\n    });\n  }\n\n  suggestionSelected(event, value) {\n    if (value !== null) {\n      this.props.sendData({\n        name: \"showResult\",\n        value: false\n      });\n      this.setState({\n        ingredient: value,\n        input: value\n      });\n      this.props.sendData({\n        name: \"ingredient\",\n        value: value\n      });\n    }\n\n    ;\n  }\n  /* renderSuggestions() {\r\n      const { suggestions } = this.state;\r\n      if (suggestions.length === 0) {\r\n        return null;\r\n      } else {\r\n        return (\r\n          <div>\r\n            <ul>\r\n              {suggestions.map(item => (\r\n                <li onClick={() => this.suggestionSelected(item)} key={item}>{item}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        );\r\n      };\r\n    }; */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      name: \"ingredient\",\n      type: \"text\",\n      value: this.state.ingredient,\n      inputValue: this.state.input,\n      onInputChange: event => this.onInputChanged,\n      onChange: (event, value) => this.suggestionSelected,\n      id: \"autocomplete-box\",\n      options: this.state.rawOptions,\n      getOptionLabel: option => option.subname,\n      style: {\n        width: 700,\n        background: 'white',\n        borderColor: \"red\",\n        '&$cssFocused $notchedOutline': {\n          borderColor: '#448cff'\n        },\n        '&:hover $notchedOutline': {\n          borderColor: '#FFFFFF'\n        }\n      },\n      renderInput: params => /*#__PURE__*/React.createElement(StyledText, Object.assign({}, params, {\n        label: \"Ingredient\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 32\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 6\n      }\n    }));\n  }\n\n}\n\nexport default Autocompleteself;","map":{"version":3,"sources":["/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js"],"names":["React","Component","axios","TextField","Autocomplete","withStyles","StyledText","root","color","borderBottomColor","borderColor","boxShadow","Autocompleteself","constructor","props","state","input","ingredient","suggestions","rawOptions","options","componentDidMount","get","then","response","result","data","setState","error","alert","onInputChanged","event","value","sendData","name","suggestionSelected","render","option","subname","width","background","params"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\nimport \"./subs.json\";\r\nimport axios from \"axios\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { withStyles } from \"@material-ui/core\";\r\n\r\nconst StyledText = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: 'gray',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#D9D9D9',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: 'white',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'white',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#D9D9D9',\r\n      },\r\n    },\r\n    boxShadow: '0 3px 3px 2px rgba(240, 105, 135, .3)'\r\n  },\r\n})(TextField);\r\n\r\nclass Autocompleteself extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: \"\",\r\n      ingredient: \"\",\r\n      suggestions: [],\r\n      rawOptions: [],\r\n      options: []\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await axios.get(\"http://127.0.0.1:8000/api/subs/\").then( \r\n      response => { \r\n        var result = response.data; \r\n        this.setState({ rawOptions: result })\r\n        }, \r\n    (error) => { \r\n    {alert(error)}; \r\n    } \r\n    ); \r\n    }\r\n\r\n\r\nonInputChanged (event, value) {\r\n    \r\n    if (value !== null) {\r\n      this.props.sendData({name: \"showResult\", value: false})\r\n    }\r\n    this.setState({ input: value });\r\n  };\r\n\r\nsuggestionSelected (event, value) {\r\n  if (value !== null) {\r\n    this.props.sendData({name: \"showResult\", value: false})\r\n    this.setState({\r\n      ingredient: value,\r\n      input: value\r\n    });\r\n    this.props.sendData({ name: \"ingredient\", value: value });\r\n    };\r\n  }\r\n  \r\n\r\n/* renderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {suggestions.map(item => (\r\n              <li onClick={() => this.suggestionSelected(item)} key={item}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n    };\r\n  }; */\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n     <Autocomplete\r\n      name = 'ingredient'\r\n      \r\n      type = 'text'\r\n      value = {this.state.ingredient}\r\n      inputValue = {this.state.input}\r\n\r\n      onInputChange = {(event) => this.onInputChanged}\r\n      onChange = {(event, value) => this.suggestionSelected}\r\n      id=\"autocomplete-box\"\r\n      options={this.state.rawOptions}\r\n      getOptionLabel={(option) => option.subname}\r\n      style={{ width: 700,\r\n                background: 'white',\r\n                borderColor: \"red\",\r\n                '&$cssFocused $notchedOutline': {\r\n                  borderColor: '#448cff',\r\n              },\r\n              '&:hover $notchedOutline':{\r\n                  borderColor:'#FFFFFF'\r\n              }\r\n               }}\r\n      renderInput={(params) => <StyledText {...params} label=\"Ingredient\" variant=\"outlined\"/>}\r\n    />\r\n    </div>\r\n  )\r\n  \r\n}\r\n}\r\n\r\nexport default Autocompleteself\r\n"]},"metadata":{},"sourceType":"module"}