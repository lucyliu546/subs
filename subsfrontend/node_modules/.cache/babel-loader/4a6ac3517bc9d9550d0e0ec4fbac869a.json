{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js\";\nimport React, { Component } from \"react\";\nimport \"./styles.css\";\nimport \"./subs.json\";\nimport axios from \"axios\";\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n    /* ToDO: replace with call to postgresql db to retrieve data in json format*/\n\n    this.onTextChanged = event => {\n      const value = event.target.value;\n      let suggestions = [];\n\n      if (value.length > 0) {\n        if (this.state.rawOptions) {\n          const regex = new RegExp(`^${value}`, \"i\");\n          let optionsArray = [];\n          const rawOptions = this.state.rawOptions;\n\n          for (var i in rawOptions) {\n            console.log(rawOptions[i]);\n            var item = rawOptions[i];\n            optionsArray.push(item.subname);\n          }\n\n          this.setState({\n            options: optionsArray\n          });\n          suggestions = this.options.sort().filter(value => regex.test(value));\n        }\n      }\n\n      this.setState({\n        suggestions: suggestions,\n        input: value\n      });\n    };\n\n    this.state = {\n      input: \"\",\n      suggestions: [],\n      rawOptions: [],\n      options: []\n    };\n  }\n\n  async componentDidMount() {\n    const subResponse = await axios.get(\"http://127.0.0.1:8000/api/subs/\").then(response => {\n      var result = response.data;\n      this.setState({\n        rawOptions: result\n      });\n    }, error => {\n      {\n        alert(error);\n      }\n      ;\n    });\n  }\n\n  suggestionSelected(value) {\n    this.setState({\n      input: value,\n      suggestions: []\n    });\n    this.props.sendData({\n      name: \"ingredient\",\n      value: value\n    });\n  }\n\n  renderSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }, suggestions.map(item => /*#__PURE__*/React.createElement(\"li\", {\n        onClick: () => this.suggestionSelected(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }\n      }, item))));\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoComplete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.input,\n      type: \"text\",\n      onChange: this.onTextChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nexport default Autocomplete;","map":{"version":3,"sources":["/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js"],"names":["React","Component","axios","Autocomplete","constructor","props","onTextChanged","event","value","target","suggestions","length","state","rawOptions","regex","RegExp","optionsArray","i","console","log","item","push","subname","setState","options","sort","filter","test","input","componentDidMount","subResponse","get","then","response","result","data","error","alert","suggestionSelected","sendData","name","renderSuggestions","map","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\nimport \"./subs.json\";\r\nimport axios from \"axios\";\r\n\r\nclass Autocomplete extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /* ToDO: replace with call to postgresql db to retrieve data in json format*/\r\n    \r\n    this.state = {\r\n      input: \"\",\r\n      suggestions: [],\r\n      rawOptions: [],\r\n      options: []\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const subResponse = await axios.get(\"http://127.0.0.1:8000/api/subs/\").then( \r\n      response => { \r\n        var result = response.data; \r\n        this.setState({ rawOptions: result })\r\n        }, \r\n        (error) => { \r\n          {alert(error)}; \r\n        } \r\n    ); \r\n    }\r\n\r\n\r\nonTextChanged = event => {\r\n    const value = event.target.value;\r\n    let suggestions = [];\r\n    if (value.length > 0) {\r\n      if (this.state.rawOptions) {\r\n        const regex = new RegExp(`^${value}`, \"i\");\r\n        let optionsArray = [];\r\n        const rawOptions = this.state.rawOptions\r\n        for (var i in rawOptions) {\r\n          console.log(rawOptions[i])\r\n          var item = rawOptions[i];\r\n          optionsArray.push(item.subname);\r\n        }\r\n        this.setState({options: optionsArray})\r\n      \r\n        suggestions = this.options.sort().filter(value => regex.test(value));\r\n      }\r\n    }\r\n    this.setState({ suggestions: suggestions, input: value });\r\n  };\r\n\r\nsuggestionSelected(value) {\r\n    this.setState({\r\n      input: value,\r\n      suggestions: []\r\n    });\r\n    this.props.sendData({ name: \"ingredient\", value: value });\r\n  };\r\n\r\nrenderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {suggestions.map(item => (\r\n              <li onClick={() => this.suggestionSelected(item)}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n    };\r\n  };\r\n\r\nrender() {\r\n    return (\r\n      <div className=\"AutoComplete\">\r\n        <input\r\n          value={this.state.input}\r\n          type=\"text\"\r\n          onChange={this.onTextChanged}\r\n        />\r\n        {this.renderSuggestions()}\r\n      </div>\r\n    );\r\n  };\r\n}\r\nexport default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}