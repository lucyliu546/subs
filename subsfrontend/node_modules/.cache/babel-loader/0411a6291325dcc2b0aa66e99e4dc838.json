{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js\";\nimport React, { Component } from \"react\";\nimport \"./styles.css\";\nimport \"./subs.json\";\nimport axios from \"axios\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { withStyles } from \"@material-ui/core\";\nconst StyledText = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: 'gray'\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: '#D9D9D9'\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: 'white'\n      },\n      '&:hover fieldset': {\n        borderColor: 'white'\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: '#D9D9D9'\n      }\n    },\n    boxShadow: '0 3px 3px 2px rgba(240, 105, 135, .3)'\n  }\n})(TextField);\n\nclass Autocompleteself extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      ingredient: \"\",\n      suggestions: [],\n      rawOptions: [],\n      options: []\n    };\n  }\n\n  async componentDidMount() {\n    await axios.get(\"http://127.0.0.1:8000/api/subs/\").then(response => {\n      var result = response.data;\n      this.setState({\n        rawOptions: result\n      });\n    }, error => {\n      {\n        alert(error);\n      }\n      ;\n    });\n  }\n\n  onTextChanged(value) {\n    this.setState({\n      input: value\n    });\n    /* let suggestions = [];\r\n    if (value.length > 0) {\r\n      this.props.sendData({name: \"showResult\", value: false})\r\n      if (this.state.rawOptions) {\r\n        const regex = new RegExp(`^${value}`, \"i\");\r\n        let optionsArray = [];\r\n        const rawOptions = this.state.rawOptions\r\n        for (var i in rawOptions) {\r\n          var item = rawOptions[i];\r\n          optionsArray.push(item.subname);\r\n        } \r\n        this.setState({options: optionsArray})\r\n      \r\n        suggestions = this.state.options.sort().filter(value => regex.test(value));\r\n      }\r\n    }\r\n    this.setState({ suggestions: suggestions, input: value }); */\n  }\n\n  suggestionSelected(value) {\n    if (value !== null) {\n      this.setState({\n        ingredient: value.subname,\n        suggestions: []\n      });\n      this.props.sendData({\n        name: \"ingredient\",\n        value: value.subname\n      });\n    }\n\n    ;\n  }\n\n  renderSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, suggestions.map(item => /*#__PURE__*/React.createElement(\"li\", {\n        onClick: () => this.suggestionSelected(item),\n        key: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }\n      }, item))));\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      name: \"ingredient\",\n      value: this.state.ingredient,\n      onChange: (event, newValue) => {\n        this.suggestionSelected(newValue);\n      },\n      inputValue: this.state.input,\n      onInputChange: (event, newInputValue) => {\n        this.onTextChanged(newInputValue);\n      },\n      id: \"autocomplete-box\",\n      options: this.state.rawOptions,\n      getOptionLabel: option => option.subname,\n      style: {\n        width: 700,\n        background: 'white',\n        borderColor: \"red\",\n        '&$cssFocused $notchedOutline': {\n          borderColor: '#448cff'\n        },\n        '&:hover $notchedOutline': {\n          borderColor: '#FFFFFF'\n        }\n      },\n      renderInput: params => /*#__PURE__*/React.createElement(StyledText, Object.assign({}, params, {\n        label: \"Ingredient\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 32\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 6\n      }\n    }));\n  }\n\n}\n\nexport default Autocompleteself;","map":{"version":3,"sources":["/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js"],"names":["React","Component","axios","TextField","Autocomplete","withStyles","StyledText","root","color","borderBottomColor","borderColor","boxShadow","Autocompleteself","constructor","props","state","input","ingredient","suggestions","rawOptions","options","componentDidMount","get","then","response","result","data","setState","error","alert","onTextChanged","value","suggestionSelected","subname","sendData","name","renderSuggestions","length","map","item","render","event","newValue","newInputValue","option","width","background","params"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\nimport \"./subs.json\";\r\nimport axios from \"axios\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { withStyles } from \"@material-ui/core\";\r\n\r\nconst StyledText = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: 'gray',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#D9D9D9',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: 'white',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'white',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#D9D9D9',\r\n      },\r\n    },\r\n    boxShadow: '0 3px 3px 2px rgba(240, 105, 135, .3)'\r\n  },\r\n})(TextField);\r\n\r\nclass Autocompleteself extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: \"\",\r\n      ingredient: \"\",\r\n      suggestions: [],\r\n      rawOptions: [],\r\n      options: []\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await axios.get(\"http://127.0.0.1:8000/api/subs/\").then( \r\n      response => { \r\n        var result = response.data; \r\n        this.setState({ rawOptions: result })\r\n        }, \r\n    (error) => { \r\n    {alert(error)}; \r\n    } \r\n    ); \r\n    }\r\n\r\n\r\nonTextChanged (value) {\r\n    \r\n    this.setState({\r\n      input: value\r\n    })\r\n    /* let suggestions = [];\r\n    if (value.length > 0) {\r\n      this.props.sendData({name: \"showResult\", value: false})\r\n      if (this.state.rawOptions) {\r\n        const regex = new RegExp(`^${value}`, \"i\");\r\n        let optionsArray = [];\r\n        const rawOptions = this.state.rawOptions\r\n        for (var i in rawOptions) {\r\n          var item = rawOptions[i];\r\n          optionsArray.push(item.subname);\r\n        } \r\n        this.setState({options: optionsArray})\r\n      \r\n        suggestions = this.state.options.sort().filter(value => regex.test(value));\r\n      }\r\n    }\r\n    this.setState({ suggestions: suggestions, input: value }); */\r\n  };\r\n\r\nsuggestionSelected(value) {\r\n  if (value !== null) {\r\n\r\n    this.setState({\r\n      ingredient: value.subname,\r\n      suggestions: []\r\n    });\r\n    this.props.sendData({ name: \"ingredient\", value: value.subname });\r\n  };\r\n}\r\nrenderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {suggestions.map(item => (\r\n              <li onClick={() => this.suggestionSelected(item)} key={item}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n    };\r\n  };\r\n\r\n\r\n\r\nrender() {\r\n    return (\r\n      <div>\r\n      {/* <div className=\"AutoComplete\">\r\n        <input\r\n          name=\"ingredient\"\r\n          value={this.state.input}\r\n          type=\"text\"\r\n          onChange={this.onTextChanged}\r\n        />\r\n        {this.renderSuggestions()}\r\n      </div> */}\r\n\r\n     <Autocomplete\r\n      name = 'ingredient'\r\n      value = {this.state.ingredient}\r\n      onChange= {(event: any, newValue: string | null) => {\r\n        this.suggestionSelected(newValue);}}\r\n      inputValue = {this.state.input}\r\n      onInputChange={(event, newInputValue) => {\r\n        this.onTextChanged(newInputValue);}}\r\n      id=\"autocomplete-box\"\r\n      options={this.state.rawOptions}\r\n      getOptionLabel={(option) => option.subname}\r\n      style={{ width: 700,\r\n                background: 'white',\r\n                borderColor: \"red\",\r\n                '&$cssFocused $notchedOutline': {\r\n                  borderColor: '#448cff',\r\n              },\r\n              '&:hover $notchedOutline':{\r\n                  borderColor:'#FFFFFF'\r\n              }\r\n               }}\r\n      renderInput={(params) => <StyledText {...params} label=\"Ingredient\" variant=\"outlined\"/>}\r\n      />\r\n      </div>\r\n    );\r\n  };\r\n}\r\nexport default Autocompleteself;\r\n"]},"metadata":{},"sourceType":"module"}