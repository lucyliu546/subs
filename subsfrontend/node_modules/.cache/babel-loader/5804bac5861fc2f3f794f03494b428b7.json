{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.css\";\nimport \"./subs.json\";\nimport axios from \"axios\";\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      let currentComponent = this;\n      return new Promise(function (resolve, reject) {\n        axios.get(\"http://127.0.0.1:8000/api/subs/\").then(response => {\n          var result = response.data;\n          console.log('Processing Request');\n          currentComponent.setState({\n            rawOptions: result\n          });\n        }, error => {\n          reject(error);\n        });\n      });\n    };\n\n    this.refreshSuggestions = () => {};\n\n    this.onTextChanged = event => {\n      const value = event.target.value;\n      let suggestions = [];\n\n      if (value.length > 0) {\n        const regex = new RegExp(`^${value}`, \"i\");\n        suggestions = this.options.sort().filter(value => regex.test(value));\n      }\n\n      this.setState({\n        suggestions: suggestions,\n        input: value\n      });\n    };\n\n    let optionsArray = [];\n    /* ToDO: replace with call to postgresql db to retrieve data in json format*/\n\n    this.componentDidMount();\n    this.refreshSuggestions();\n    this.options = optionsArray;\n    this.state = {\n      input: \"\",\n      suggestions: [],\n      rawOptions: []\n    };\n  }\n\n  suggestionSelected(value) {\n    this.setState({\n      input: value,\n      suggestions: []\n    });\n    this.props.sendData({\n      name: \"ingredient\",\n      value: value\n    });\n  }\n\n  renderSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, suggestions.map(item => /*#__PURE__*/React.createElement(\"li\", {\n        onClick: () => this.suggestionSelected(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }\n      }, item))));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoComplete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.input,\n      type: \"text\",\n      onChange: this.onTextChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nexport default Autocomplete;","map":{"version":3,"sources":["/mnt/c/Users/Lucy/Documents/projects/bakingsubsv2/subsfrontend/src/Autocomplete.js"],"names":["React","Component","PropTypes","axios","Autocomplete","constructor","props","componentDidMount","currentComponent","Promise","resolve","reject","get","then","response","result","data","console","log","setState","rawOptions","error","refreshSuggestions","onTextChanged","event","value","target","suggestions","length","regex","RegExp","options","sort","filter","test","input","optionsArray","state","suggestionSelected","sendData","name","renderSuggestions","map","item","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\nimport \"./subs.json\";\r\nimport axios from \"axios\";\r\n\r\nclass Autocomplete extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let optionsArray = [];\r\n    /* ToDO: replace with call to postgresql db to retrieve data in json format*/\r\n    this.componentDidMount()\r\n    this.refreshSuggestions()\r\n    this.options = optionsArray;\r\n    this.state = {\r\n      input: \"\",\r\n      suggestions: [],\r\n      rawOptions: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let currentComponent = this;\r\n    return new Promise(function (resolve, reject) { \r\n      axios.get(\"http://127.0.0.1:8000/api/subs/\").then( \r\n          (response) => { \r\n              var result = response.data; \r\n              console.log('Processing Request'); \r\n              currentComponent.setState({ rawOptions: result })\r\n          }, \r\n              (error) => { \r\n              reject(error); \r\n          } \r\n      ); \r\n  }); \r\n}\r\n\r\nrefreshSuggestions = () => {\r\n  \r\n}\r\n\r\n  onTextChanged = event => {\r\n    const value = event.target.value;\r\n    let suggestions = [];\r\n    if (value.length > 0) {\r\n      const regex = new RegExp(`^${value}`, \"i\");\r\n      suggestions = this.options.sort().filter(value => regex.test(value));\r\n    }\r\n    this.setState({ suggestions: suggestions, input: value });\r\n  };\r\n\r\n  suggestionSelected(value) {\r\n    this.setState({\r\n      input: value,\r\n      suggestions: []\r\n    });\r\n    this.props.sendData({ name: \"ingredient\", value: value });\r\n  }\r\n\r\n  renderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {suggestions.map(item => (\r\n              <li onClick={() => this.suggestionSelected(item)}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AutoComplete\">\r\n        <input\r\n          value={this.state.input}\r\n          type=\"text\"\r\n          onChange={this.onTextChanged}\r\n        />\r\n        {this.renderSuggestions()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}